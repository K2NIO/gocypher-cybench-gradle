/*
 * Copyright (C) 2020, K2N.IO.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

plugins {
  id 'com.github.johnrengelman.shadow' version '6.1.0'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'java'
  id 'maven'
}
archivesBaseName = 'cybench-launcher-gradle-plugin'
group 'com.gocypher.cybench.launcher.plugin'
version '1.0.0'
sourceCompatibility = 1.8

repositories {
  mavenCentral ()
  mavenLocal ()
}

dependencies {
  shadow localGroovy ()
  shadow gradleApi ()

  testCompile group: 'junit', name: 'junit', version: '4.12'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.2'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.2'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
  compile group: 'com.jcabi', name: 'jcabi-manifests', version: '1.1'
  compile group: 'com.github.oshi', name: 'oshi-core', version: '5.2.5'
  compile group: 'org.jhardware', name: 'jHardware', version: '0.8.6'
  compile group: 'com.gocypher.cybench.client', name: 'gocypher-cybench-runner', version: '1.0.0'
  compile group: 'com.gocypher.cybench.client', name: 'gocypher-cybench-annotations', version: '1.0.0'

  implementation group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.26'
  annotationProcessor group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.26'

  compile group: 'org.reflections', name: 'reflections', version: '0.9.12'
  compile group: 'org.twdata.maven', name: 'mojo-executor', version: '2.3.1'
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourceJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier "javadoc"
  from javadoc.destinationDir
}
artifacts {
  archives jar
  archives sourceJar
  archives javadocJar
}
signing {
  sign configurations.archives
}

gradlePlugin {
  plugins {
    multiplePlugin{
      id = 'cybench-launcher-gradle-plugin'
      implementationClass = 'com.gocypher.cybench.Launcher'
    }
  }
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      customizePom(pom)
      groupId 'com.github.mautini'
      artifactId 'schemaorg-java'
      version '1.0.1'

      from components.java

      // create the sign pom artifact
      pom.withXml {
        def pomFile = file("${project.buildDir}/generated-pom.xml")
        writeTo(pomFile)
        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        artifact(pomAscFile) {
          classifier = null
          extension = 'pom.asc'
        }
      }

      artifact(sourceJar) {
        classifier = 'sources'
      }
      artifact(javadocJar) {
        classifier = 'javadoc'
      }

      // create the signed artifacts
      project.tasks.signArchives.signatureFiles.each {
        artifact(it) {
          def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
          if (matcher.find()) {
            classifier = matcher.group(1)
          } else {
            classifier = null
          }
          extension = 'jar.asc'
        }
      }
    }
  }
  repositories {
    maven {
      url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      credentials {
        username sonatypeUsername
        password sonatypePassword
      }
    }
  }
}

def customizePom(pom) {
  pom.withXml {
    def root = asNode()

    // eliminate test-scoped dependencies (no need in maven central POMs)
    root.dependencies.removeAll { dep ->
      dep.scope == "test"
    }

    // add all items necessary for maven central publication
    root.children().last() + {
      resolveStrategy = Closure.DELEGATE_FIRST

      name 'cybench-launcher-gradle-plugin'
      description 'Maven plugin designed to execute JMH benchmarks, collect results, add environment properties , build report and store it into external repository for further analysis.'
      url 'https://github.com/K2NIO/gocypher-cybench-gradle'

      scm {
        url 'https://github.com/K2NIO/gocypher-cybench-gradle'
        connection 'scm:git:git://github.com/K2NIO/gocypher-cybench-gradle'
        developerConnection 'scm:git:git//github.com/K2NIO/gocypher-cybench-gradle'
      }
      organization{
        name 'K2N.IO'
        url 'https://cybench.io'
      }
      licenses {
        license {
          name 'GNU Lesser General Public License v2.1'
          url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
        }
      }

      developers {
        developer {
          name 'CyBench Team'
          email 'info@cybench.io'
          organization 'K2N.IO'
          organizationUrl 'https://cybench.io'
        }
      }
    }
  }
}

model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$buildDir/generated-pom.xml")
  }
  tasks.publishMavenJavaPublicationToMavenLocal {
    dependsOn project.tasks.signArchives
  }
  tasks.publishMavenJavaPublicationToMavenRepository {
    dependsOn project.tasks.signArchives
  }
}

task release(type: Zip) {
  from 'build/libs/'
  include '*'
  destinationDir(file('./release'))
}